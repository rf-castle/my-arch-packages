name: Build Packages
on:
  push:
    branches: [ main ]
  workflow_dispatch: { }
env:
  # pacmanのリポジトリURL(github pages)
  REPOSITORY_URL: "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
  # pacmanのリポジトリ名
  REPOSITORY_NAME: "parrot"

jobs:
  update-packages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Update Packages
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git submodule foreach --recursive git pull origin master
          (git commit -m "Update submodules" && git push origin main ) || echo "No changes to commit"
  pre-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./source
          push: true
          tags: "ghcr.io/${{ github.repository }}/myarchlinux:latest"
          cache-from: type=gha
          cache-to: type=gha,mode=max
          pull: true
      - name: Extract Paru From Image
        run: |
          docker run --name extract-paru -d ghcr.io/${{ github.repository }}/myarchlinux:latest
          docker cp extract-paru:/opt/dist/ .
          docker rm -f extract-paru
      - name: Upload Paru
        uses: actions/upload-artifact@v4
        with:
          name: package-paru
          path: "dist/*.pkg.tar.zst"
  list-package:
    runs-on: ubuntu-latest
    needs:
      - pre-build
      - update-packages
    container:
      image: ghcr.io/${{ github.repository }}/myarchlinux:latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Update Submodules
        run: |
          git config --global --add safe.directory $PWD
          git submodule update --init --recursive
      - name: Setup pacman remote repo
        run: |
          echo -e "\n[${{ env.REPOSITORY_NAME }}]\nServer = ${{ env.REPOSITORY_URL }}/\nSigLevel = Optional TrustAll" >> /etc/pacman.conf
          pacman -Sy --noconfirm
      - name: Get Packages to Build
        id: get-packages
        run: |
          cd source
          packages=()
          for dir in */ ; do
            dir=${dir%/}
            # scriptsや隠しディレクトリは除外
            if [[ "$dir" == "scripts" || "$dir" == .* ]]; then
              continue
            fi
            # PKGBUILDがなければスキップ
            if [[ ! -f "$dir/PKGBUILD" ]]; then
              continue
            fi
            # localバージョン取得
            local_ver=$(source "$dir/PKGBUILD"; echo "${pkgver}-${pkgrel}")
            pkgname=$(source "$dir/PKGBUILD"; echo "${pkgname}")
            remote_ver=""
            # pacmanからリモートバージョン取得
            if pacman -Si ${{ env.REPOSITORY_NAME }}/$pkgname &>/dev/null; then
              remote_ver=$(pacman -Si ${{ env.REPOSITORY_NAME }}/$pkgname | awk -F': ' '/^Version/ {print $2}')
            fi
            # リモートリポジトリに存在しない or バージョンが異なる場合のみ追加
            if [[ "$local_ver" != "$remote_ver" ]]; then
              packages+=("$dir")
            fi
          done
          if [ ${#packages[@]} -eq 0 ]; then
            packages_json="[]"
          else
            packages_json=$(printf '%s\n' "${packages[@]}" | jq -R . | jq -cs .)
          fi
          echo "packages=$packages_json" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs:
      - list-package
    container:
      image: ghcr.io/${{ github.repository }}/myarchlinux:latest
    if: ${{ needs.list-package.outputs.packages != '[]' }}
    strategy:
      matrix:
        package: ${{ fromJSON(needs.list-package.outputs.packages) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set Package Path
        run: |
          echo "PACKAGE_PATH=$(realpath source/${{ matrix.package }})" >> $GITHUB_ENV
      - name: Update Permissions
        run: |
          chown -R builder:builder .
      - name: Update Submodules
        run: |
          git config --global --add safe.directory $PWD
          git submodule update --init $PACKAGE_PATH
      - name: Run Scripts when exists
        run: |
          pushd source
          if [ -f ./scripts/${{ matrix.package }}.sh ]; then
            bash ./scripts/${{ matrix.package }}.sh
          fi
          popd
      - name: Build Package
        run: |
          pushd $PACKAGE_PATH
          sudo -u builder -- env PKGDEST=$PWD/dist paru -B --noconfirm .
          ls -l dist
          popd
      - name: upload package
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.package }}
          path: ${{ env.PACKAGE_PATH }}/dist/*.pkg.tar.zst

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - list-package
    if: always() && needs.list-package.result == 'success'
    container:
      image: ghcr.io/${{ github.repository }}/myarchlinux:latest
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5.0.0
      - name: Download Exists Packages
        # Todo: 署名検証を追加
        run: |
          echo -e "\n[${{ env.REPOSITORY_NAME }}]\nServer = ${{ env.REPOSITORY_URL }}/\nSigLevel = Optional TrustAll" >> /etc/pacman.conf
          pacman -Sy --noconfirm
          pkgs=$(pacman -Sl ${{ env.REPOSITORY_NAME }} | awk '{print $2}')
          pacman -Sw --noconfirm $pkgs --cachedir=$PWD
      - name: Download Build Package
        uses: actions/download-artifact@v4
        with:
          pattern: package-*
          path: "."
          merge-multiple: true
      - name: Create Repository
        run: |
          repo-add -n -R ${{ env.REPOSITORY_NAME }}.db.tar.gz *.pkg.tar.zst
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          # Upload entire repository
          path: '.'
      - name: Upload With Github Pages
        uses: actions/deploy-pages@v4.0.5
